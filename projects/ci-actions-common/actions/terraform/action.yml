name: terraform
description: run terraform plan on PR and run terraform apply after merge

inputs:
  working_directory:
    default: ./
    description: working directory for all terraform commands
  backend_config:
    default: main.s3.tfbackend
    description: -backend-config for terraform

runs:
  using: composite
  steps:
    - name: checkout
      uses: actions/checkout@v3

    - name: format
      id: fmt
      run: terraform fmt -check
      shell: sh
      working-directory: ${{ inputs.working_directory }}

    - name: init
      id: init
      run: terraform init -reconfigure -backend-config="${{ inputs.backend_config }}"
      shell: sh
      working-directory: ${{ inputs.working_directory }}

    - name: validate
      id: validate
      run: terraform validate -no-color
      shell: sh
      working-directory: ${{ inputs.working_directory }}

    - name: plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -out=plan.tmp
        terraform show -no-color plan.tmp >"${GITHUB_WORKSPACE}/plan.out"
      continue-on-error: true
      shell: sh
      working-directory: ${{ inputs.working_directory }}

    - name: pr comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        # have to use a file - https://github.com/actions/github-script/issues/266#issuecomment-1159681385
        script: |
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('plan.out', 'utf8')
          const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""

          const output = `
          #### Terraform Format and Style: \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization: \`${{ steps.init.outcome }}\`
          #### Terraform Validation: \`${{ steps.validate.outcome }}\`
          #### Terraform Plan: \`${{ steps.plan.outcome }}\`

          <details>
          <summary>Show Plan</summary>

          \`\`\`
          ${plan}
          \`\`\`

          </details>
          ${truncated_message}

          Pushed by: @${{ github.actor }}
          Action: \`${{ github.event_name }}\`
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: check `terraform plan` status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      shell: sh

    - name: terraform apply
      if: >-
        github.ref == 'refs/heads/main' && (
          github.event_name == 'push' || github.event_name == 'schedule'
        )
      run: terraform apply -auto-approve -input=false
      shell: sh
      working-directory: ${{ inputs.working_directory }}
